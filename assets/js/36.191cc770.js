(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{338:function(t,s,a){t.exports=a.p+"assets/img/5b0765177a1222540da1865edac47972.5b076517.jpg"},339:function(t,s,a){t.exports=a.p+"assets/img/b479239a9ed81b105c86bbadfc6450fe.b479239a.png"},340:function(t,s,a){t.exports=a.p+"assets/img/6da79f6db4c3dc6fad11fa4f10ffbbe9.6da79f6d.png"},497:function(t,s,a){"use strict";a.r(s);var n=a(27),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"限流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#限流"}},[t._v("#")]),t._v(" 限流")]),t._v(" "),s("p",[t._v("在高并发场景下有三把利器保护系统：缓存、降级、和限流。缓存的目的是提升系统的访问你速度和增大系统能处理的容量；降级是当服务出问题或影响到核心流程的性能则需要暂时屏蔽掉。而有些场景则需要限制并发请求量，如秒杀、抢购、发帖、评论、恶意爬虫等。\n限流算法")]),t._v(" "),s("p",[t._v("常见的限流算法有：计数器，漏桶、令牌桶。")]),t._v(" "),s("h2",{attrs:{id:"计数器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计数器"}},[t._v("#")]),t._v(" 计数器")]),t._v(" "),s("p",[t._v("使用zset维护一个滑动的时间窗口，通过score来圈出这个时间窗口。为节省内存，我们只需要保留时间窗口内的行为记录，同时如果用户是冷用户，滑动时间窗口内的行为是空记录，那么这个 zset 就可以从内存中移除，不再占用空间。")]),t._v(" "),s("p",[t._v("通过统计滑动窗口内的行为数量与阈值 max_count 进行比较就可以得出当前的行为是否允许。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("is_action_allowed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action_key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" period"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("     \n    key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hist:%s:%s'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action_key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     \n    now_ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 毫秒时间戳     ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pipeline"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" pipe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# client 是 StrictRedis 实例         ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 记录行为         ")]),t._v("\n        pipe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zadd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" now_ts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" now_ts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# value 和 score 都使用毫秒时间戳         ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 移除时间窗口之前的行为记录，剩下的都是时间窗口内的         ")]),t._v("\n        pipe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zremrangebyscore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" now_ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" period "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取窗口内的行为数量         ")]),t._v("\n        pipe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zcard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置 zset 过期时间，避免冷用户持续占用内存         ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 过期时间应该等于时间窗口的长度，再多宽限 1s         ")]),t._v("\n        pipe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expire"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" period "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 批量执行         ")]),t._v("\n        _"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" current_count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pipe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比较数量是否超标     ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" current_count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" max_count \n")])])]),s("h2",{attrs:{id:"漏桶"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#漏桶"}},[t._v("#")]),t._v(" 漏桶")]),t._v(" "),s("p",[t._v("漏桶(Leaky Bucket)算法思路很简单，水(请求)先进入到漏桶里，漏桶以一定的速度出水(接口有响应速率)，当水流入速度过大会直接溢出(访问频率超过接口响应速率)，然后就拒绝请求，可以看出漏桶算法能强行限制数据的传输速率。")]),t._v(" "),s("img",{attrs:{src:a(338)}}),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# coding: utf8 ")]),t._v("\n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" time \n \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Funnel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("     \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" leaking_rate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("         \n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" capacity  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 漏斗容量         ")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("leaking_rate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" leaking_rate  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 漏嘴流水速率 ")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left_quota "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" capacity  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 漏斗剩余空间         ")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("leaking_ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 上一次漏水时间 ")]),t._v("\n    \n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make_space")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("         \n        now_ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         \n        delta_ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" now_ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("leaking_ts  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 距离上一次漏水过去了多久         ")]),t._v("\n        delta_quota "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" delta_ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("leaking_rate  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 又可以腾出不少空间了         ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" delta_quota "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 腾的空间太少，那就等下次吧             ")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("         \n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left_quota "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" delta_quota  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 增加剩余空间         ")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("leaking_ts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" now_ts  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 记录漏水时间         ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left_quota "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 剩余空间不得高于容量             ")]),t._v("\n            self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left_quota "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capacity \n\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("watering")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" quota"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("         \n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("make_space"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left_quota "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" quota"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 判断剩余空间是否足够             ")]),t._v("\n            self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left_quota "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" quota             \n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("         \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),t._v(" \n\nfunnels "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所有的漏斗 ")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# capacity  漏斗容量 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# leaking_rate 漏嘴流水速率 quota/s ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("is_action_allowed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action_key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" leaking_rate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("     \n    key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%s:%s'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action_key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     \n    funnel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" funnels"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" funnel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("         \n        funnel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Funnel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" leaking_rate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         \n        funnels"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" funnel     \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" funnel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("watering"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n")])])]),s("p",[t._v("Funnel 对象的 make_space 方法是漏斗算法的核心，其在每次灌水前都会被调用以触发漏水，给漏斗腾出空间来。能腾出多少空间取决于过去了多久以及流水的速率。Funnel 对象占据的空间大小不再和行为的频率成正比，它的空间占用是一个常量。")]),t._v(" "),s("p",[t._v("问题来了，分布式的漏斗算法该如何实现？能不能使用 Redis 的基础数据结构来搞定？")]),t._v(" "),s("p",[t._v("我们观察 Funnel 对象的几个字段，我们发现可以将 Funnel 对象的内容按字段存储到一个 hash 结构中，灌水的时候将 hash 结构的字段取出来进行逻辑运算后，再将新值回填到 hash 结构中就完成了一次行为频度的检测。")]),t._v(" "),s("p",[t._v("但是有个问题，我们无法保证整个过程的原子性。从 hash 结构中取值，然后在内存里运算，再回填到 hash 结构，这三个过程无法原子化，意味着需要进行适当的加锁控制。而一旦加锁，就意味着会有加锁失败，加锁失败就需要选择重试或者放弃。 如果重试的话，就会导致性能下降。如果放弃的话，就会影响用户体验。同时，代码的复杂度也跟着升高很多。")]),t._v(" "),s("p",[t._v("Redis 4.0提供了一个限流Redis模块，名称为redis-cell，该模块提供漏斗算法，并提供原子的限流指令。")]),t._v(" "),s("p",[t._v("该模块只有一条指令cl.throttle，其参数和返回值比较复杂。")]),t._v(" "),s("img",{attrs:{src:a(339)}}),t._v(" "),s("p",[t._v("上面这个指令的意思是允许「用户老钱回复行为」的频率为每 60s 最多 30 次(漏水速率)，漏斗的初始容量为 15，也就是说一开始可以连续回复 15 个帖子，然后才开始受漏水速率的影响。我们看到这个指令中漏水速率变成了 2 个参数，替代了之前的单个浮点数。用两个参数相除的结果来表达漏水速率相对单个浮点数要更加直观一些。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("> cl.throttle laoqian:reply 15 30 60 1\n1) (integer) 0    # 0表示允许，1表示拒绝\n2) (integer) 15    # 漏斗容量capacity\n3) (integer) 14    # 漏斗剩余空间left_quota\n4) (integer) -1    # 如果拒绝了，需要多长时间后再重试，单位秒\n5) (integer) 2    # 多长时间后，漏斗完全空出来，单位秒\n")])])]),s("p",[t._v("在执行限流指令时，如果被拒绝了，就需要丢弃或重试。cl.throttle 指令考虑的非常周到，连重试时间都帮你算好了，直接取返回结果数组的第四个值进行 sleep 即可，如果不想阻塞线程，也可以异步定时任务来重试。")]),t._v(" "),s("h2",{attrs:{id:"令牌桶"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#令牌桶"}},[t._v("#")]),t._v(" 令牌桶")]),t._v(" "),s("p",[t._v("令牌桶算法的原理是系统会以一个恒定的速度往桶里放入令牌，而如果请求需要被处理，则需要先从桶里获取一个令牌，当桶里没有令牌可取时，则拒绝服务。从原理上看，令牌桶算法和漏桶算法是相反的，一个“进水”，一个是“漏水”。")]),t._v(" "),s("img",{attrs:{src:a(340)}}),t._v(" "),s("p",[t._v("Google的Guava包中的RateLimiter类就是令牌桶算法的解决方案。")]),t._v(" "),s("h2",{attrs:{id:"漏桶算法和令牌桶算法的选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#漏桶算法和令牌桶算法的选择"}},[t._v("#")]),t._v(" 漏桶算法和令牌桶算法的选择")]),t._v(" "),s("p",[t._v("漏桶算法与令牌桶算法在表面看起来类似，很容易将两者混淆。但事实上，这两者具有截然不同的特性，且为不同的目的而使用。")]),t._v(" "),s("p",[t._v("漏桶算法与令牌桶算法的区别在于，漏桶算法能够强行限制数据的传输速率，令牌桶算法能够在限制数据的平均传输速率的同时还允许某种程度的突发传输。")]),t._v(" "),s("p",[t._v("需要注意的是，在某些情况下，漏桶算法不能够有效地使用网络资源，因为漏桶的漏出速率是固定的，所以即使网络中没有发生拥塞，漏桶算法也不能使某一个单独的数据流达到端口速率。因此，漏桶算法对于存在突发特性的流量来说缺乏效率。而令牌桶算法则能够满足这些具有突发特性的流量。通常，漏桶算法与令牌桶算法结合起来为网络流量提供更高效的控制。")]),t._v(" "),s("h2",{attrs:{id:"reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.jianshu.com/p/a3d068f2586d",target:"_blank",rel:"noopener noreferrer"}},[t._v("基于Redis的限流系统的设计"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);