(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{420:function(t,a,s){t.exports=s.p+"assets/img/dcb65e330fa6e993d53680574fb19507.dcb65e33.png"},421:function(t,a,s){t.exports=s.p+"assets/img/13c2d7795f0bfea057e2231407aa4b09.13c2d779.png"},559:function(t,a,s){"use strict";s.r(a);var n=s(27),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"java并发-线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java并发-线程"}},[t._v("#")]),t._v(" Java并发-线程")]),t._v(" "),a("h2",{attrs:{id:"什么是线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程"}},[t._v("#")]),t._v(" 什么是线程")]),t._v(" "),a("p",[t._v("现代操作系统在运行一个程序时，回为其创建一个进程。现代操作系统调度的最小单元是线程，也叫轻量级进程（Light Weight Process），在一个进程里可以创建多个线程，这些线程都拥有各自的计数器、堆栈和局部变量等属性，并且能够访问共享的内存变量。处理器在这些线程上高速切换，让使用者感觉到这些线程在同时执行。")]),t._v(" "),a("h2",{attrs:{id:"线程优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程优先级"}},[t._v("#")]),t._v(" 线程优先级")]),t._v(" "),a("p",[t._v("Java线程种通过一个整型成员变量"),a("code",[t._v("priority")]),t._v("来控制优先级，优先级的范围从1~10，在线程构建的时候可以通过"),a("code",[t._v("setPriority(int)")]),t._v("方法来修改优先级，默认优先级是5，优先级高的线程分配时间片的数量要多于优先级低的线程。")]),t._v(" "),a("p",[t._v("设置线程优先级时，针对频繁阻塞（休眠或者I/O操作）的线程需要设置较高的优先级，而偏重计算（需要较多CPU时间或者偏运算）的线程则设置较低的优先级，确保处理器不会被独占。")]),t._v(" "),a("p",[t._v("在不同的JVM以及操作系统上，线程规划会存在差异，有些操作系统甚至会忽略对线程优先级的设定。")]),t._v(" "),a("h2",{attrs:{id:"java线程的状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java线程的状态"}},[t._v("#")]),t._v(" Java线程的状态")]),t._v(" "),a("p",[t._v("Java线程在运行的生命周期中可能处于下述的6种不同的状态，在给定的一个时刻，线程只能处于其中的一个状态。")]),t._v(" "),a("ul",[a("li",[t._v("NEW：初始状态，线程被构建，但是还没有调用"),a("code",[t._v("start()")]),t._v("方法")]),t._v(" "),a("li",[t._v("RUNNABLE：运行状态，Java线程将操作系统种的就绪和运行两种状态笼统地乘坐“运行种”。")]),t._v(" "),a("li",[t._v("BLOCKED：阻塞状态，表示线程阻塞于锁。")]),t._v(" "),a("li",[t._v("WAITING：等待状态，表示线程进入等待状态，进入改状态表示当前线程需要等待其他线程做出一些特定动作（通知或中断）。")]),t._v(" "),a("li",[t._v("TIME_WAITING：超时等待状态，该状态不同于WAITING，它是可以在指定的时间自行返回的。")]),t._v(" "),a("li",[t._v("TERMINATED：终止状态，表示当前线程已经执行完毕。")])]),t._v(" "),a("img",{attrs:{src:s(420)}}),t._v(" "),a("p",[t._v("线程创建之后，调用"),a("code",[t._v("start()")]),t._v("方法开始运行。当线程执行"),a("code",[t._v("wait()")]),t._v("方法之后，线程进入等待状态。进入等待状态的线程需要依靠其他线程的通知才能返回到运行状态，而超时等待状态相当于在等待状态的基础上增加了超时限制，也就是超时时间到达时将会返回到运行状态。当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到阻塞状态。线程在执行"),a("code",[t._v("Runnable")]),t._v("的"),a("code",[t._v("run()")]),t._v("方法之后将会进入到终止状态。")]),t._v(" "),a("h2",{attrs:{id:"daemon线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#daemon线程"}},[t._v("#")]),t._v(" Daemon线程")]),t._v(" "),a("p",[a("code",[t._v("Daemon")]),t._v("线程是一种支持型线程，因为他主要被用作程序中后台调度以及支持性工作。这意味着，当一个Java虚拟机中不存在非"),a("code",[t._v("Daemon")]),t._v("线程的时候，Java虚拟机将会退出。可以通过调用"),a("code",[t._v("Thread.setDaemon(true)")]),t._v("将线程设置为"),a("code",[t._v("Daemon")]),t._v("线程。")]),t._v(" "),a("p",[a("code",[t._v("Daemon")]),t._v("属性需要在启动线程之前设置，不能再启动线程之后设置。")]),t._v(" "),a("p",[a("code",[t._v("Daemon")]),t._v("线程被用作完成支持性工作，但是在Java虚拟机退出时"),a("code",[t._v("Daemon")]),t._v("线程中的"),a("code",[t._v("finally")]),t._v("块不一定会执行。")]),t._v(" "),a("h2",{attrs:{id:"等待-通知机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#等待-通知机制"}},[t._v("#")]),t._v(" 等待/通知机制")]),t._v(" "),a("p",[t._v("等待/通知的相关方法是任意Java对象都具备的，因为这些方法被定义在所有对象的超类"),a("code",[t._v("java.lang.Object")]),t._v("上。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("notify()")]),t._v("：通知一个在对象上等待的线程，使其从"),a("code",[t._v("wait()")]),t._v("方法返回，而返回的前提是该线程获取到了对象的锁。")]),t._v(" "),a("li",[a("code",[t._v("notifyAll()")]),t._v("：通知所有等待在该对象上的线程。")]),t._v(" "),a("li",[a("code",[t._v("wait()")]),t._v("：调用该方法的线程进入"),a("code",[t._v("WAITING")]),t._v("，只有等待另外线程的通知或被中断才会返回，需要注意，调用"),a("code",[t._v("wait()")]),t._v("方法后，会释放对象的锁。")]),t._v(" "),a("li",[a("code",[t._v("wait(long)")]),t._v("：超时等待一段时间，这里的参数时间是毫秒，也就是等待长达n毫秒，如果没有通知就超时返回。")]),t._v(" "),a("li",[a("code",[t._v("wait(long, int)")]),t._v("：对于超时时间更细粒度的控制，可以达到纳秒。")])]),t._v(" "),a("p",[t._v("等待/通知机制，是指一个线程A调用了对象O的"),a("code",[t._v("wait()")]),t._v("方法进入等待状态，而另一个线程B调用了对象O的"),a("code",[t._v("notify()")]),t._v("或者"),a("code",[t._v("notifyAll()")]),t._v("方法，线程A收到通知后从对象O的"),a("code",[t._v("wait()")]),t._v("方法返回，进而执行后续操作。上述两个线程通过对象O来完成交互，而对象上的"),a("code",[t._v("wait()")]),t._v("和"),a("code",[t._v("notify/notifyAll()")]),t._v("的关系就如何开关信号一样，用来完成等待方和通知方之间的交互工作。")]),t._v(" "),a("p",[t._v("调用"),a("code",[t._v("wait()")]),t._v("、"),a("code",[t._v("notify()")]),t._v("以及"),a("code",[t._v("notifyAll()")]),t._v("时需要注意的细节：")]),t._v(" "),a("ol",[a("li",[t._v("使用"),a("code",[t._v("wait()")]),t._v("、"),a("code",[t._v("notify()")]),t._v("以及"),a("code",[t._v("notifyAll()")]),t._v("时需要先调用对象加锁。")]),t._v(" "),a("li",[t._v("调用"),a("code",[t._v("wait()")]),t._v("方法后，线程状态由"),a("code",[t._v("RUNNING")]),t._v("变为"),a("code",[t._v("WAITING")]),t._v("，并将当前线程放置到对象的等待队列。")]),t._v(" "),a("li",[a("code",[t._v("notify")]),t._v("或"),a("code",[t._v("notifyAll()")]),t._v("方法调用后，等待线程依旧不会从"),a("code",[t._v("wait()")]),t._v("返回，需要调用"),a("code",[t._v("notify()")]),t._v("或"),a("code",[t._v("notifyAll()")]),t._v("的线程释放锁之后，等待线程才有机会从"),a("code",[t._v("wait()")]),t._v("返回。")]),t._v(" "),a("li",[a("code",[t._v("notify()")]),t._v("方法将等待队列中的一个等待线程从等待队列中移到同步队列中，而"),a("code",[t._v("notifyAll()")]),t._v("方法则是将等待队列中所有的线程全部移到同步队列，被移动的线程状态由"),a("code",[t._v("WAITING")]),t._v("变为"),a("code",[t._v("BLOCKED")]),t._v("。")]),t._v(" "),a("li",[t._v("从"),a("code",[t._v("wait()")]),t._v("方法返回的前提是获得了调用对象的锁。")])]),t._v(" "),a("p",[t._v("等待/通知机制依托于同步机制，其目的就是确保等待线程从"),a("code",[t._v("wait()")]),t._v("方法返回时能够感知到通知线程对变量做出的修改。")]),t._v(" "),a("img",{attrs:{src:s(421)}}),t._v(" "),a("h2",{attrs:{id:"线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[t._v("#")]),t._v(" 线程池")]),t._v(" "),a("p",[t._v("线程池提供了一种限制和管理资源（包括执行一个任务）。 每个线程池还维护一些基本统计信息，例如已完成任务的数量。")]),t._v(" "),a("p",[t._v("使用线程池的好处：")]),t._v(" "),a("ul",[a("li",[t._v("降低资源消耗：通过重复利用已创建的线程降低线程创建和销毁造成的消耗。")]),t._v(" "),a("li",[t._v("提高响应速度：当任务到达时，任务可以不需要的等到线程创建就能立即执行。")]),t._v(" "),a("li",[t._v("提高线程的可管理性：线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。")])]),t._v(" "),a("p",[t._v("在创建线程池时不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。Executors 返回线程池对象的弊端如下：")]),t._v(" "),a("ul",[a("li",[t._v("FixedThreadPool 和 SingleThreadExecutor ： 允许请求的队列长度为 Integer.MAX_VALUE ，可能堆积大量的请求，从而导致OOM。")]),t._v(" "),a("li",[t._v("CachedThreadPool 和 ScheduledThreadPool ： 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致OOM。")])]),t._v(" "),a("p",[t._v("ThreadPoolExecutor 构造函数重要参数：")]),t._v(" "),a("ul",[a("li",[t._v("corePoolSize : 核心线程数线程数定义了最小可以同时运行的线程数量。")]),t._v(" "),a("li",[t._v("maximumPoolSize : 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。")]),t._v(" "),a("li",[t._v("workQueue: 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。")]),t._v(" "),a("li",[t._v("keepAliveTime：当线程池中的线程数量大于 corePoolSize 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 keepAliveTime才会被回收销毁；")]),t._v(" "),a("li",[t._v("unit ：keepAliveTime 参数的时间单位。")]),t._v(" "),a("li",[t._v("threadFactory ：executor 创建新线程的时候会用到。")]),t._v(" "),a("li",[t._v("handler ：饱和策略。")])]),t._v(" "),a("h3",{attrs:{id:"线程池提交任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池提交任务"}},[t._v("#")]),t._v(" 线程池提交任务")]),t._v(" "),a("p",[t._v("我们使用 executor.execute(worker) 来提交一个任务到线程池中去，这个方法非常重要，下面我们来看看它的源码：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存放线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),t._v(" ctl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ctlOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUNNING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("workerCountOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CAPACITY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果任务为null，则抛出异常。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("command "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NullPointerException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ctl 中保存的线程池当前的一些状态信息")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ctl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  下面会涉及到 3 步 操作")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.首先判断当前线程池中之行的任务数量是否小于 corePoolSize")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果小于的话，通过addWorker(command, true)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("workerCountOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" corePoolSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addWorker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ctl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.如果当前之行的任务数量大于等于 corePoolSize 的时候就会走到这里")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 isRunning 方法判断线程池状态，线程池处于 RUNNING 状态才会被并且队列可以加入任务，该任务才会被加入进去")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isRunning")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" workQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("offer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" recheck "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ctl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再次获取线程池状态，如果线程池状态不是 RUNNING 状态就需要从任务队列中移除任务，并尝试判断线程是否全部执行完毕。同时执行拒绝策略。")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isRunning")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("recheck"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果当前线程池为空就新创建一个线程并执行。")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("workerCountOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("recheck"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addWorker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3. 通过addWorker(command, false)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果addWorker(command, false)执行失败，则通过reject()执行相应的拒绝策略的内容。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addWorker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);